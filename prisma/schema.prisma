// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Next-auth/prisma公式のDB設定 https://authjs.dev/reference/adapter/prisma
// 各idをint型autoincrementに変更
model Account {
  id                 Int  @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int  @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              Int  @id @default(autoincrement())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  likesArticles   Bookmark[]
  postArticles    Article[]
}

model Article {
  id              Int     @id @default(autoincrement())
  title           String
  content         String
  isLikedUsers    Bookmark[]
  author          User?    @relation(fields: [authorUserId], references: [id])
  authorUserId    Int?
}

// 中間テーブルは明示的に作成
model Bookmark {
  id          Int       @id @default(autoincrement())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  article     Article?  @relation(fields: [articleId], references: [id])
  articleId   Int?

}